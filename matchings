#include <iostream>
#include <vector>
#include <utility>

typedef std::vector< std::vector<std::pair<int, int> > > Data;

void InputData(Data * data, int * counter_left, int * counter_right) {
    int change = 1;
    for (int i = 0; i < data->size(); ++i) {
        for (int j = 0; j < (*data)[i].size(); ++j) {
            if (i == 0 || j == 0 || i == (data->size()-1) || j == ((*data)[i].size()-1)) {
                (*data)[i][j].first = 0;
                (*data)[i][j].second = 0;
            } else {
                char symbol;
                std::cin >> symbol;
                if (symbol == '#') {
                    if (change == 1) {
                        (*counter_left)++;
                        (*data)[i][j].first = change;
                        (*data)[i][j].second = *counter_left;
                    }
                    if (change == -1) {
                        (*counter_right)++;
                        (*data)[i][j].first = change;
                        (*data)[i][j].second = *counter_right;  			}
                } else {
                    (*data)[i][j].first = 0;
                    (*data)[i][j].second = 0;
                }
            }
            change *= -1;
        }
        if((*data)[0].size() % 2 == 0) {
            change *= -1;
        }
    }
}

std::vector < std::vector<int> > CreateLeftPart (int& counter_left, Data & data) {
    std::vector < std::vector<int> > left_part(counter_left + 1);
    int cur_vertex = -1;
    for(int i = 1; i < data.size() - 1 ; ++i) {
        for(int j = 1; j < data[i].size() - 1; ++j) {
            if(data[i][j].first == 1) {
                cur_vertex++;
                if(data[i-1][j].first == -1) {
                    left_part[cur_vertex].push_back(data[i-1][j].second);
                }
                if(data[i][j-1].first == -1) {
                    left_part[cur_vertex].push_back(data[i][j-1].second);
                }
                if(data[i][j+1].first == -1) {
                    left_part[cur_vertex].push_back(data[i][j+1].second);
                }
                if(data[i+1][j].first == -1) {
                    left_part[cur_vertex].push_back(data[i+1][j].second);
                }
            }
        }
    }
    return left_part;
}

int HasBetterMatch(std::vector<int> * visited, std::vector<int>& matching, std::vector< std::vector<int> >& left_part, int left_vertex) {
    if ((*visited)[left_vertex] == 1) return false;
    (*visited)[left_vertex] = 1;
    for (int vertex = 0; vertex < left_part[left_vertex].size(); ++vertex) {
        int connected = left_part[left_vertex][vertex];
        if ( matching[connected] == -1 || HasBetterMatch(visited, matching, left_part, matching[connected]) == 1) {
            matching[connected] = left_vertex;
            return true;
        }
    }
    return false;
}

int CountMatching(int& counter_right, int& counter_left, std::vector < std::vector<int> >& left_part) {
    std::vector<int> matching(counter_right + 1, -1);
    int count_matching = 0;
    for (int left_vertex = 0; left_vertex < counter_left+1; ++left_vertex) {
        std::vector<int> visited(counter_left+1, 0);
        if(HasBetterMatch(&visited, matching, left_part, left_vertex) == 1) {
            count_matching++;
        }
    }
    return count_matching;
}


int main() {
    int height, width;
    std::cin >> height >> width;
    height += 2;
    width += 2;
    Data data(height, std::vector<std::pair<int, int> > (width));
    int counter_left = -1;
    int counter_right = -1;

    InputData(&data, &counter_left, &counter_right);

    if(counter_left != counter_right) {
        std::cout << "No";
        return 0;
    }

    std::vector < std::vector<int> > left_part = CreateLeftPart(counter_left, data);

    int count_matching = CountMatching(counter_right, counter_left, left_part);

    if(count_matching == counter_left+1 || height == 2 || width == 2 || count_matching == 0) {
        std::cout << "Yes";
    } else {
        std::cout << "No";
    }

    return 0;
}
