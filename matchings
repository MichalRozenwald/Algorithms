#include <iostream>
#include <vector>
#include <utility>

int HasBetterMatch(std::vector<int>& visited, std::vector<int>& matching, std::vector< std::vector<int> >& left_part, int left_vertex) {
  if (visited[left_vertex] == 1) return 0;
  visited[left_vertex] = 1;
  for (int vertex = 0; vertex < left_part[left_vertex].size(); ++vertex) {
    int connected = left_part[left_vertex][vertex];
    if ( matching[connected] == -1 || HasBetterMatch(visited, matching, left_part, matching[connected]) == 1) {
      matching[connected] = left_vertex;
      return 1;
    }
  }
  return 0;
}

int main() {
  int height, width;
  std::cin >> height >> width;
  height += 2;
  width += 2;
  std::vector< std::vector<std::pair<int, int> > > data(height, std::vector<std::pair<int, int> > (width));
  int change = 1;
  int counter_left = -1;
  int counter_right = -1;
  char symbol;

  for (int i = 0; i < data.size(); ++i) {
    for (int j = 0; j < data[i].size(); ++j) {
      if (i == 0 || j == 0 || i == (data.size()-1) || j == (data[i].size()-1)) {
        data[i][j].first = 0;
        data[i][j].second = 0;
      } else {
        std::cin >> symbol;
        if (symbol == '#') {
          if (change == 1) {
            counter_left++;
            data[i][j].first = change;
            data[i][j].second = counter_left;
          }
          if (change == -1) {
            counter_right++;
            data[i][j].first = change;
            data[i][j].second = counter_right;  			}
        } else {
          data[i][j].first = 0;
          data[i][j].second = 0;
        }
      }
      change *= -1;
      }
      if(width % 2 == 0) {
        change *= -1;
    }
  }

  if(counter_left != counter_right) {
    std::cout << "No";
    return 0;
  }

  std::vector < std::vector<int> > left_part(counter_left + 1);
  int cur_vertex = -1;
  for(int i = 1; i < data.size() - 1 ; ++i) {
    for(int j = 1; j < data[i].size() - 1; ++j) {
      if(data[i][j].first == 1) {
        cur_vertex++;
        if(data[i-1][j].first == -1) {
          left_part[cur_vertex].push_back(data[i-1][j].second);
        }
        if(data[i][j-1].first == -1) {
          left_part[cur_vertex].push_back(data[i][j-1].second);
        }
        if(data[i][j+1].first == -1) {
          left_part[cur_vertex].push_back(data[i][j+1].second);
        }
        if(data[i+1][j].first == -1) {
          left_part[cur_vertex].push_back(data[i+1][j].second);
        }
      }
    }
  }

  std::vector<int> matching(counter_right + 1, -1);
  int count_matching = 0;
  for (int left_vertex = 0; left_vertex < counter_left+1; ++left_vertex) {
    std::vector<int> visited(counter_left+1, 0);
    if(HasBetterMatch(visited, matching, left_part, left_vertex) == 1) {
      count_matching++;
    }
  }

  if(count_matching == counter_left+1 || height == 2 || width == 2 || count_matching == 0) {
    std::cout << "Yes";
  } else {
    std::cout << "No";
  }

  return 0;
}
